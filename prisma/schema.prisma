// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Customer specific fields
  phone         String?
  
  // Tesla vehicle info
  vehicles      Vehicle[]
  
  // Orders and interactions
  orders        Order[]
  favorites     Favorite[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  addresses     Address[]
  reviews       Review[]
  promoUsages   PromoCodeUsage[]
  
  // NextAuth
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Vehicle {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  model     TeslaModel
  year      Int
  trim      String?  // Long Range, Performance, etc.
  color     String?
  nickname  String?  // "My Tesla", "Work Car"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  
  // Parent-child relationship fields
  parentId    String?   // Points to parent category
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  level       Int       @default(1) // 1=Model 3, 2=Model 3 - BODY, 3=M3 1001 - Bumper
  
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Collection {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  
  products    CollectionProduct[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("collections")
}

model Product {
  id                String    @id @default(cuid())
  sku               String    @unique
  name              String
  slug              String    @unique
  description       String?
  shortDescription  String?
  
  // Pricing
  price             Decimal
  compareAtPrice    Decimal?  // Original price for sales
  costPrice         Decimal?  // Your cost for profit tracking
  
  // Inventory
  stockQuantity     Int       @default(0)
  lowStockThreshold Int       @default(5)
  trackQuantity     Boolean   @default(true)
  
  // Tesla compatibility
  compatibleModels  String?   // JSON string: "MODEL_3,MODEL_Y"
  compatibleYears   String?   // "2018-2023" or "2020+"
  
  // Physical attributes
  weight            Decimal?  // For shipping calculations
  dimensions        String?   // "10x5x2 inches"
  
  // Tesla-specific fields
  oeNumber          String?   // OE/OEM part number
  unitPacking       String?   // Unit packaging info
  fullPacking       String?   // Full box packaging info
  
  // Organization
  categoryId        String
  category          Category  @relation(fields: [categoryId], references: [id])
  
  // Media
  images            ProductImage[]
  
  // Collections
  collections       CollectionProduct[]
  
  // SEO & Status
  metaTitle         String?
  metaDescription   String?
  isActive          Boolean   @default(true)
  isFeatured        Boolean   @default(false)
  
  // User interactions
  favorites         Favorite[]
  wishlistItems     WishlistItem[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  reviews           Review[]
  
  // Analytics
  viewCount         Int       @default(0)
  salesCount        Int       @default(0)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url       String
  altText   String?
  sortOrder Int      @default(0)
  
  createdAt DateTime @default(now())

  @@map("product_images")
}

model CollectionProduct {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sortOrder    Int        @default(0)
  
  @@unique([collectionId, productId])
  @@map("collection_products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false) // Verified purchase
  isApproved Boolean @default(false) // Admin approval
  
  // Helpful votes
  helpfulCount Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName    String
  lastName     String
  company      String?
  address1     String
  address2     String?
  city         String
  province     String  // Canadian provinces
  postalCode   String
  country      String  @default("CA")
  phone        String?
  
  isDefault    Boolean @default(false)
  
  // Orders using this address
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("addresses")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String?     // Made optional for guest orders
  user              User?       @relation(fields: [userId], references: [id])
  
  // Status
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Addresses - Made optional for flexible address handling
  shippingAddressId String?
  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?
  billingAddress    Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  // Direct address fields for when address isn't saved
  shippingFirstName String?
  shippingLastName  String?
  shippingEmail     String?
  shippingPhone     String?
  shippingAddress1  String?
  shippingAddress2  String?
  shippingCity      String?
  shippingProvince  String?
  shippingPostal    String?
  shippingCountry   String?
  
  billingFirstName  String?
  billingLastName   String?
  billingAddress1   String?
  billingAddress2   String?
  billingCity       String?
  billingProvince   String?
  billingPostal     String?
  billingCountry    String?
  
  // Pricing
  subtotal          Decimal
  taxAmount         Decimal
  shippingAmount    Decimal
  discountAmount    Decimal @default(0)
  total             Decimal
  
  // Discount info
  promoCode         String?
  promoDiscount     Decimal @default(0)
  
  // Payment - Updated for Stripe
  stripePaymentIntentId String? // This is perfect for Stripe integration
  paymentMethod     String? // "credit_card", "paypal", etc.
  
  // Shipping
  shippingMethod    String?
  trackingNumber    String?
  trackingUrl       String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  estimatedDelivery DateTime?
  
  // Items
  items             OrderItem[]
  
  // Notes
  customerNotes     String?
  adminNotes        String?
  
  // Email notifications
  confirmationSent  Boolean @default(false)
  shippingSent      Boolean @default(false)
  deliverySent      Boolean @default(false)
  
  // Guest order support - ADD THIS FIELD
  isGuest           Boolean @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  // Product details at time of order
  productName  String  // Store product name in case product is deleted
  productSku   String? // Store SKU
  productImage String? // Store primary image URL
  
  quantity  Int
  price     Decimal // Price at time of order
  total     Decimal
  
  createdAt DateTime @default(now())

  @@map("order_items")
}

model PromoCode {
  id                String      @id @default(cuid())
  code              String      @unique
  description       String?
  
  // Discount type and amount
  discountType      DiscountType // PERCENTAGE, FIXED_AMOUNT, FREE_SHIPPING
  discountValue     Decimal     // Percentage (0-100) or dollar amount
  
  // Usage limits
  usageLimit        Int?        // Max total uses
  usageCount        Int         @default(0)
  usageLimitPerUser Int?        // Max uses per customer
  
  // Minimum requirements
  minimumAmount     Decimal?    // Minimum order amount
  
  // Validity
  startsAt          DateTime?
  expiresAt         DateTime?
  isActive          Boolean     @default(true)
  
  // Product/category restrictions
  applicableProducts String?    // JSON array of product IDs
  applicableCategories String?  // JSON array of category IDs
  
  usages            PromoCodeUsage[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("promo_codes")
}

model PromoCodeUsage {
  id          String    @id @default(cuid())
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId     String?
  
  discountAmount Decimal
  
  createdAt   DateTime  @default(now())
  
  @@unique([promoCodeId, userId, orderId])
  @@map("promo_code_usage")
}

model ShippingZone {
  id          String         @id @default(cuid())
  name        String         @unique
  countries   String         // JSON array of country codes
  provinces   String?        // JSON array of province codes (for Canada)
  
  methods     ShippingMethod[]
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("shipping_zones")
}

model ShippingMethod {
  id              String       @id @default(cuid())
  zoneId          String
  zone            ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  
  name            String       // "Standard Shipping", "Express"
  description     String?
  price           Decimal
  freeThreshold   Decimal?     // Free shipping over this amount
  estimatedDays   String?      // "3-5 business days"
  isActive        Boolean      @default(true)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("shipping_methods")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  
  isRead    Boolean  @default(false)
  isReplied Boolean  @default(false)
  
  // Additional context
  userAgent String?
  ipAddress String?
  
  createdAt DateTime @default(now())

  @@map("contact_submissions")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
}

enum TeslaModel {
  MODEL_3
  MODEL_Y
  MODEL_S
  MODEL_X
  CYBERTRUCK
  ROADSTER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}