// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Customer specific fields
  phone         String?
  
  // Tesla vehicle info
  vehicles      Vehicle[]
  
  // Orders and interactions
  orders        Order[]
  favorites     Favorite[]
  cartItems     CartItem[]
  addresses     Address[]
  
  // NextAuth
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Vehicle {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  model     TeslaModel
  year      Int
  trim      String?  // Long Range, Performance, etc.
  color     String?
  nickname  String?  // "My Tesla", "Work Car"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  
  // Parent-child relationship fields
  parentId    String?   // Points to parent category
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  level       Int       @default(1) // 1=Model 3, 2=Model 3 - BODY, 3=M3 1001 - Bumper
  
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Collection {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  
  products    CollectionProduct[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("collections")
}

model Product {
  id                String    @id @default(cuid())
  sku               String    @unique
  name              String
  slug              String    @unique
  description       String?
  shortDescription  String?
  
  // Pricing
  price             Decimal
  compareAtPrice    Decimal?  // Original price for sales
  costPrice         Decimal?  // Your cost for profit tracking
  
  // Inventory
  stockQuantity     Int       @default(0)
  lowStockThreshold Int       @default(5)
  trackQuantity     Boolean   @default(true)
  
  // Tesla compatibility
  compatibleModels  String?   // JSON string: "MODEL_3,MODEL_Y"
  compatibleYears   String?   // "2018-2023" or "2020+"
  
  // Physical attributes
  weight            Decimal?  // For shipping calculations
  dimensions        String?   // "10x5x2 inches"
  
  // Tesla-specific fields
  oeNumber          String?   // OE/OEM part number
  unitPacking       String?   // Unit packaging info
  fullPacking       String?   // Full box packaging info
  
  // Organization
  categoryId        String
  category          Category  @relation(fields: [categoryId], references: [id])
  
  // Media
  images            ProductImage[]
  
  // Collections
  collections       CollectionProduct[]
  
  // SEO & Status
  metaTitle         String?
  metaDescription   String?
  isActive          Boolean   @default(true)
  isFeatured        Boolean   @default(false)
  
  // User interactions
  favorites         Favorite[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url       String
  altText   String?
  sortOrder Int      @default(0)
  
  createdAt DateTime @default(now())

  @@map("product_images")
}

model CollectionProduct {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sortOrder    Int        @default(0)
  
  @@unique([collectionId, productId])
  @@map("collection_products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("favorites")
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName    String
  lastName     String
  company      String?
  address1     String
  address2     String?
  city         String
  province     String  // Canadian provinces
  postalCode   String
  country      String  @default("CA")
  phone        String?
  
  isDefault    Boolean @default(false)
  
  // Orders using this address
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("addresses")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  // Status
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Addresses
  shippingAddressId String
  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  // Pricing
  subtotal          Decimal
  taxAmount         Decimal
  shippingAmount    Decimal
  discountAmount    Decimal @default(0)
  total             Decimal
  
  // Payment
  stripePaymentIntentId String?
  
  // Shipping
  shippingMethod    String?
  trackingNumber    String?
  trackingUrl       String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  // Items
  items             OrderItem[]
  
  // Notes
  customerNotes     String?
  adminNotes        String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Decimal // Price at time of order
  total     Decimal
  
  createdAt DateTime @default(now())

  @@map("order_items")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
}

enum TeslaModel {
  MODEL_3
  MODEL_Y
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
}